This directory contains the pre-built drivers for PKCS#7 signature checking
and hash calculation used by SELoader.

If your BIOS doesn't support PKCS7 Verify Protocol or any Hash Protocol, put
these drivers to the location where the SELoader is located on ESP.

Optionally, you can build the drivers from the scratch.

Eventually, if Secure Boot is enabled, you need to sign the drivers with the
proper key in advance.

Pre-built binary information
============================

Upstream: git://github.com/tianocore/edk2.git
Commit: c137d95081690d4877fbeb5f1856972e84ac32f2
Sha256sum:
 * Pkcs7VerifyDxe.efi
   1c68dc892c887b7628b392f10b012e8f09177523333551379b1648ae81155681
 * Hash2DxeCrypto.efi
   5408631e8e45f4473f5ec928a55db1ca1b4d727b1187e90f942f13f68a03dc56

Build instruction
=================

Use libedk2
-----------
Refer to https://github.com/jiazhang0/libedk2

Manually build
--------------
$ git clone git://github.com/tianocore/edk2.git
$ cd edk2

Next follow up the instructions found in
CryptoPkg/Library/OpensslLib/Patch-HOWTO.txt

$ make -C BaseTools/Source/C
$ vim Conf/target.txt
Change the configurations as the following:
TARGET                = RELEASE
TARGET_ARCH           = X64
TOOL_CHAIN_TAG        = GCC5
$ source edksetup.sh
$ build -DSECURE_BOOT_ENABLE=TRUE -p SecurityPkg/SecurityPkg.dsc

The generated binaries are then retrieved under
Build/SecurityPkg/RELEASE_GCC5/X64/.

Sign the drivers
================

If Secure Boot is enabled, you need to sign them with the private key
you used to sign the drivers. For example,

$ sbsign --cert <x509_cert> --key <private_key> Pkcs7VerifyDxe.efi
$ sbsign --cert <x509_cert> --key <private_key> Hash2DxeCrypto.efi
